"""Add column map model

Revision ID: 68982ccf2c7c
Revises: dc3dd97eae46
Create Date: 2024-03-07 16:33:09.710215

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "68982ccf2c7c"
down_revision: Union[str, None] = "dc3dd97eae46"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "column_maps",
        sa.Column("data_producer_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("mapping", sa.JSON(), nullable=False),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["data_producer_id"],
            ["data_producers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "data_producer_id", "name", "version_id", name="column_map_unique_contraint"
        ),
    )
    op.create_unique_constraint(
        "data_producers_name_unique_constraint", "data_producers", ["name"]
    )
    op.add_column(
        "data_submissions", sa.Column("column_map_id", sa.Integer(), nullable=False)
    )
    op.alter_column(
        "data_submissions",
        "data_producer_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.alter_column(
        "data_submissions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "data_submissions",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.create_foreign_key(
        "data_submissions_column_map_id_fkey",
        "data_submissions",
        "column_maps",
        ["column_map_id"],
        ["id"],
    )
    op.alter_column("users", "email", existing_type=sa.VARCHAR(), nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("users", "email", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_constraint(
        "data_submissions_column_map_id_fkey", "data_submissions", type_="foreignkey"
    )
    op.alter_column(
        "data_submissions",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "data_submissions",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "data_submissions",
        "data_producer_id",
        existing_type=sa.INTEGER(),
        nullable=True,
    )
    op.drop_column("data_submissions", "column_map_id")
    op.drop_constraint(
        "data_producers_name_unique_constraint", "data_producers", type_="unique"
    )
    op.drop_table("column_maps")
    # ### end Alembic commands ###
